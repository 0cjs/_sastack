#!/usr/bin/env bash
#
#   sastack-setup - configure and print environment for sastack use
#
#   This must be executed as `eval $(.../setup-sastack)` so that the
#   parent environment executes the commands this prints to set up
#   the environment.
#
#   WARNING: All code below must be _very_ careful never to produce
#   output on stdout as the caller would attempt to execute it.
#   Use `1>&2` redirections where there's any chance of a program
#   writing to stdout.
#

eecho()     { echo 1>&2 "$@"; }
die()       { local exitcode="$1"; shift; echo 1>&2 "$@"; exit $exitcode; }
setarg()    {
    local option="$1" optarg="$2"
    [[ -z $2 ]]  && die 2 "Error: option $1 needs a following argument"
    echo "$2"
}

setup_sastack() {
    local sastack="$basedir/_sastack/"
    local sabin="$sastack/.local/bin"
    #   We always use stack from and install it to ~/.local/bin
    local localbin=~/.local/bin
    #   If this doesn't already exist, our pre-built Stack
    #   is not installed correctly.
    [[ -x $sabin/stack ]] \
        || die 1 "Stand-alone _sastack/ not availble or incorrectly built"
    export STACK_ROOT="$sastack/.stack"
    export PATH="$sabin:$PATH"
}


####################################################################
#   Parse arguments and environment

export XZ_DEFAULTS; : ${XZ_DEFAULTS=--threads=0 -v}

builddir=''
preload=''
preload_file=''
while [[ ${#@} -gt 0 ]]; do case "$1" in
    -b)     shift; builddir="$(setarg -b "$1")"; shift;;
    -p)     shift; preload="$(setarg -p "$1")"; shift;;
    -P)     shift; preload_file="$(setarg -p "$1")"; shift;;
    *)      die 2 "Error: unknown option: $1";;
esac; done
[[ ${#@} -eq 0 ]] || die 2 "Error: extra arguments:" "$@"

#   If $NETLIFY_IMAGES_CDN_DOMAIN is set, we are probably on Netlify:
#   put Stack where it will be cached and and preload if that's empty.
[[ -z $builddir && -n $NETLIFY_IMAGES_CDN_DOMAIN ]] && {
    preload=XXX
    builddir=/opt/build/cache/stack
}

####################################################################
#   Main

#   Setup and preload builddir if necessary.
[[ -n $builddir ]] && {
    mkdir -p "$builddir" || die 1 "Cannot create builddir $builddir"
    builddir=$(cd "$builddir" && pwd -P)    # Ensure absolute path
    [[ -w $builddir ]] || die 1 "Cannot write builddir $builddir"
    export STACK_ROOT="$builddir"
    echo "export STACK_ROOT=\"$builddir\";"

    [[ -n $preload ]] && {
        eecho "Preloading $preload"
        curl -sS "$preload" | tar -C "$builddir" -xf - \
            || die 3 "Preload failed."
        #   XXX should better catch errors here
    }
}

if [[ -n $preload_file ]]; then
    #   Generate the preload
    [[ -z $builddir ]] && die 2 "Cannot use -P without -b"
    eecho "Generating preload: $preload_file"
    tar -C "$builddir" -caf "$preload_file" .
    ls -lh "$preload_file" 1>&2
    file "$preload_file"
else
    #   Install stack to ~/.local/bin/ and put that at front of $PATH.
    #   (We don't bother trying to use stack from elsewhere because it
    #   may be an old version that we can't upgrade.)
    stackbin=~/.local/bin
    mkdir -p "$stackbin"
    export PATH="$stackbin:$PATH"
    echo "export PATH=\"$stackbin:$PATH\";"
    if [[ -x $stackbin/stack ]]; then
        stack upgrade 1>&2
    else
        eecho "Installing stack to $stackbin/"
        eecho "This may need to sudo to install additional OS packages."
        curl -sSL https://get.haskellstack.org/ | sh -s - -d "$stackbin" 1>&2
    fi
fi
